<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，对sql进行分类化管理，可理解为sql隔离 
     注意：使用mapper代理方法开发，namespace有特殊重要的作用
-->
<mapper namespace="test">
   <!-- id:标识映射文件中的sql
   将sql语句封装到mappedstatement对象中，所以将id称为statement的id
  parameterType指定输入参数的类型
  resultType 指定sql输出映射的java对象
    -->
    <!-- 需求：通过id查询用户信息,#{}表示一个占位符?,id表示接收的参数
    如果输入参数是简单类型，#{}中的参数名可以任意
    -->
   <select id="findUserById" parameterType="int" resultType="com.test.pojo.User">
       select * from user where id = #{id}
   </select>

   <!-- ${}表示拼接字符串将接收的参数内容不加任何修饰拼接在SQL中，这种容易sql注入
    ${value}接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
    -->
   <select id="findUserByName" parameterType="java.lang.String" resultType="com.test.pojo.User">
       select * from user where username like '%${value}%'
   </select>
   
   <insert id="insertUser" parameterType="com.test.pojo.User">
   <!-- 将插入数据的主键返回到user对象中(自增主键)
   SELECT LAST_INSERT_ID()得到刚插入记录的主键，只适用于自增主键
   keyProperty将查询的主键值设置到parameterType指定的对象中的哪个属性
   order是 SELECT LAST_INSERT_ID()相对insert语句执行顺序
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
       SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user(username,password,notes) value(#{username},#{password},#{notes})
    <!-- 使用mysql uuid()返回非自增主键 
    通过uuid得到主键，将主键设置到user对象的id属性中
    其次在insert执行时，从user中取出id属性值
    -->
   <!--   <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Integer">
       SELECT uuid()
    </selectKey>
    insert into user(id,username,password,notes) value(#{id},#{username},#{password},#{notes})    -->
   </insert>
   
   <delete id="deleteUser" parameterType="int">
       delete from user where id = #{id}
   </delete>
   
   <update id="updateUser" parameterType="com.test.pojo.User">
       update user set username=#{username},password=#{password},notes=#{notes} where id = #{id}
   </update>
</mapper>